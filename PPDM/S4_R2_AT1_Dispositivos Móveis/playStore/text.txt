Nome do Aplicativo: CineGallery

Descrição Curta: App mobile em React Native com login, persistência e carrossel de filmes.

Descrição Completa: O CineGallery é um aplicativo mobile desenvolvido em React Native com Expo, que une um fluxo simples de autenticação com persistência local e um carrossel animado de filmes consumido da API OMDb. A proposta do projeto é demonstrar como combinar navegação entre telas, armazenamento de dados no dispositivo e consumo de uma API externa dentro de um app moderno, criando uma base sólida para evoluir para um catálogo de filmes mais completo.
Logo ao abrir o aplicativo, ele verifica no AsyncStorage se o usuário já possui uma sessão ativa. Caso não exista nenhum dado salvo, o app inicia pela tela Home, que apresenta uma mensagem de boas-vindas e um botão que leva ao Login. A tela de login é simples e funciona com credenciais fixas (email pedro@gmail.com e senha 123). Quando os dados são validados corretamente, o usuário é direcionado para a tela Logged, e nesse momento uma chave é gravada no armazenamento local para manter o estado de login mesmo após o fechamento do app. Caso os dados estejam incorretos, uma mensagem de erro é exibida em vermelho.

Na tela Logged, o usuário encontra uma saudação e duas opções principais: acessar o carrossel de filmes ou encerrar a sessão. Ao clicar em logout, a chave de login é removida do AsyncStorage e o app retorna para a tela inicial. Já o carrossel é um dos destaques do projeto: ele consome a API OMDb por meio do Axios, trazendo uma lista de filmes que são exibidos de forma horizontal em um componente FlatList com efeitos de escala e rotação aplicados pelo React Native Reanimated. Cada pôster exibido no carrossel é acompanhado de uma versão borrada no fundo, que muda dinamicamente conforme o item ativo, criando uma experiência visual mais imersiva e atrativa.

A arquitetura do projeto está organizada em páginas e componentes reutilizáveis. Em src/pages ficam as telas principais, como Home, Login, Logged, Carousel e a configuração das rotas em AppNavigation. Em src/components estão utilitários como o AsyncStorage.js, que abstrai as operações de salvar, buscar e remover dados do armazenamento local, e o TextInputComp.js, que centraliza a criação de inputs estilizados para formulários. O diretório assets concentra as imagens usadas como plano de fundo e botões, reforçando o aspecto visual do app.

Entre os pontos fortes do CineGallery estão a organização clara da navegação, a integração real com uma API pública de filmes, o uso de persistência para manter o estado do usuário entre sessões e a implementação de um carrossel animado moderno, que valoriza a experiência visual. Por outro lado, ainda existem pontos a melhorar, como a substituição das credenciais fixas por um sistema de autenticação real, a validação mais robusta dos dados de login, a adição de feedbacks de carregamento no carrossel e a expansão das funcionalidades para incluir detalhes dos filmes, listas personalizadas e sistema de favoritos.

Em resumo, o CineGallery demonstra de forma prática como desenvolver um aplicativo que combina autenticação, persistência local, integração com API externa e animações fluidas. Ele já é funcional e bem estruturado, servindo como prova de conceito e como base para evoluções futuras, onde pode se transformar em um catálogo completo de filmes com login de usuários reais, navegação detalhada e recursos personalizados.